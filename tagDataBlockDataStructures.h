#pragma once

#include "tagGenericDataStructures.h"
#include "tagInputDataStructures.h"
#include "tagConnectionDataStructures.h"


typedef enum block_status {
	BLOCK_STATUS_CLEAR_MODE,
	BLOCK_STATUS_CREATE_RECORD_MODE,
	BLOCK_STATUS_ENTER_QUERY_MODE,
	BLOCK_STATUS_EXECUTE_QUERY_MODE
} BLOCK_STATUS;

typedef struct structDataBlock {

	/* DataBlock html tag properties and variables */
	char          *dataBlockName;
	char        *masterBlockName;
	char         *connectionName;
	/** \brief Possible values are 'y' or 'n'
	*/
	char   *autoGeneratedColumns;
	
	BOOL		   isSchemaObjectWritable;
	/*	Hold the table/view key column name. 
		If not set database default key column name is assigned if exists (for oracle, default value is "rowid"	
		Either database default or user provided value must be set, that is this variable cannot be NULL
	*/	
	char				*keyColumnName;
	char				*keyColumnValue;
	INPUT_TAG_DATA_TYPE	keyColumnType;

	char         *dataSourceName;
	char		 *dataSchemaName;
	char           insertAllowed;
	char           updateAllowed;
	char           deleteAllowed;
	char            *whereClause;
	char   *whereClauseEvaluated;
	char          *orderByClause;
	char          *joinCondition;
	char *joinConditionEvaluated;

	BOOL              visibility;

	int              recordCount;
	int            currentPageNo;

	/** \brief Where clause statement.
	*
	*  It is used only in "Execute Query" mode.
	*  Before executing query of the data block, the contents of this variable are added to the where clause.
	*  After each executing, its content is freed.
	*/
	char *executeQueryModeWhereClause;

	/* Static part of dynamic html part (Half dynamic) */
	TAGGeneric *rootTAGGeneric;
	TAGGeneric *tailTAGGeneric;
	/* Dynamic html content holders (Full dynamic) */
	TAGGeneric       *startTAG;
	TAGGeneric         *endTAG;

	/**
	Do not destroy rootTAGInput and currentTAGInput. They will be destroyed by other destroy functions.
	These are defined to fast access TAGInputs of the TAGGeneric linked list.
	*/
	TAGInput *rootTAGInput;
	TAGInput *currentTAGInput;
	
	TAGConnection *tagConnection;

	BLOCK_STATUS blockStatus;

	struct structDataBlock *next;
} TAGDataBlock;


